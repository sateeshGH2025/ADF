{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfdataengginterview"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"interprepdb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'interprepdb'"
		},
		"linkedService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'linkedService1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adflearningde.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://keysinterviewprep.vault.azure.net/"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "PC\\SQL2017_2"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Project"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ir_login"
		},
		"interprepdb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "interprepdb.database.windows.net"
		},
		"interprepdb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "adfsinbgs"
		},
		"interprepdb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "des"
		},
		"linkedService1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "interprepdb.database.windows.net"
		},
		"linkedService1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "adfsinbgs"
		},
		"linkedService1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "des"
		},
		"trigger1_properties_pipeline_parameters_start_time": {
			"type": "string",
			"defaultValue": "@{trigger().outputs.windowStartTime}"
		},
		"trigger1_properties_pipeline_parameters_end_time": {
			"type": "string",
			"defaultValue": "@{trigger().outputs.windowEndTime}"
		},
		"Tumbling_window_properties_pipeline_parameters_start_time": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"Tumbling_window_properties_pipeline_parameters_end_time": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Join')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Join_pivot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_pipeline_id]",
							"storedProcedureParameters": {
								"Factory_name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "linkedService1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-03T07:06:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Join_pivot')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/conditionalsplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Conditional_split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-02T06:52:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Conditional_split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/missing_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_inbound",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Get Metadata2",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_outbound",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "source",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "source_files",
							"value": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('source_files')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set variable4",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(join(activity('Get Metadata2').output.childItems,','), variables('file_name'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"wildcardFileName": {
																"value": "@variables('file_name')",
																"type": "Expression"
															},
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ds_inbound",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_outbound",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[insert_pipeline_id]",
													"storedProcedureParameters": {
														"Factory_name": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"pipeline_name": {
															"value": {
																"value": "@concat(pipeline().Pipeline,'_',item().name)",
																"type": "Expression"
															},
															"type": "String"
														},
														"pipeline_run_id": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "linkedService1",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Set variable4",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "file_name",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup2",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set variable4",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Email_notification]",
											"storedProcedureParameters": {
												"ADF_name": {
													"type": "String",
													"value": {
														"value": "@pipeline().DataFactory",
														"type": "Expression"
													}
												},
												"error_message": {
													"type": "String",
													"value": {
														"value": "@activity('Set variable4').Error.message",
														"type": "Expression"
													}
												},
												"Pipeline_name": {
													"type": "String",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												},
												"status": {
													"type": "String",
													"value": {
														"value": "@variables('Error')",
														"type": "Expression"
													}
												},
												"trigger_date": {
													"type": "String",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "sp_emailnotification",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Web1_copy1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"url": "https://prod-73.eastus.logic.azure.com:443/workflows/48186c82e3ef4955804e0b671ce69628/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=7qcN8dUKISBFKsiQxZgQPsG_cCD7JemoS_jCfYO26ig",
										"body": {
											"value": "@concat('{\n    \"to\":\"',variables('to'),'\",\n     \"subject\":\"',activity('Lookup2').output.value[0].subject,'\",\n     \"body\":\"',activity('Lookup2').output.value[0].body,'\"\n}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Email_notification]",
								"storedProcedureParameters": {
									"ADF_name": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"error_message": {
										"type": "String",
										"value": null
									},
									"Pipeline_name": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"status": {
										"type": "String",
										"value": {
											"value": "@variables('Start')",
											"type": "Expression"
										}
									},
									"trigger_date": {
										"type": "String",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sp_emailnotification",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-73.eastus.logic.azure.com:443/workflows/48186c82e3ef4955804e0b671ce69628/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=7qcN8dUKISBFKsiQxZgQPsG_cCD7JemoS_jCfYO26ig",
							"body": {
								"value": "@concat('{\n    \"to\":\"',variables('to'),'\",\n     \"subject\":\"',activity('Lookup1').output.value[0].subject,'\",\n     \"body\":\"',activity('Lookup1').output.value[0].body,'\"\n}')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"source_files": {
						"type": "Array"
					},
					"destination_files": {
						"type": "Integer"
					},
					"Missing_files": {
						"type": "Array"
					},
					"file_name": {
						"type": "Integer"
					},
					"to": {
						"type": "String",
						"defaultValue": "bsurya1009@gmail.com"
					},
					"Start": {
						"type": "String",
						"defaultValue": "Started"
					},
					"Successful": {
						"type": "String",
						"defaultValue": "Successful"
					},
					"Error": {
						"type": "String",
						"defaultValue": "Error"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-04T09:00:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inbound')]",
				"[concat(variables('factoryId'), '/datasets/ds_outbound')]",
				"[concat(variables('factoryId'), '/datasets/sp_emailnotification')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputfiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "union",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-01T07:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/union')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT [Video_id]\n      ,[playlist_id]\n      ,[Video_Name]\n      ,[Video_published_date]\n      ,[Video_views_count]\n      ,[Video_like_count]\n      ,[Video_favorite_count]\n      ,[Video_comment_count]\n      ,[Video_duartion]\n      ,[Video_thumbnail]\n      ,[Video_caption_status] FROM [Project].[dbo].[Video] WHERE [Video_published_date] > ','''', pipeline().parameters.start_time, '''',' AND [Video_published_date] <', '''', pipeline().parameters.end_time, '''')\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "video"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"start_time": {
										"value": "@pipeline().parameters.start_time",
										"type": "Expression"
									},
									"end_time": {
										"value": "@pipeline().parameters.end_time",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"start_time": {
						"type": "string",
						"defaultValue": "@{trigger().outputs.windowStartTime}"
					},
					"end_time": {
						"type": "string",
						"defaultValue": "@{trigger().outputs.windowEndTime}"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-02T00:17:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT [Video_id]\n      ,[playlist_id]\n      ,cast([Video_Name] as nvarchar(10)) as [Video_Name]\n      ,[Video_published_date]\n      ,[Video_views_count]\n      ,[Video_like_count]\n      ,[Video_favorite_count]\n      ,[Video_comment_count]\n      ,[Video_duartion]\n      ,[Video_thumbnail]\n      ,[Video_caption_status]\n  FROM [Project].[dbo].[Video]",
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadUncommitted",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "video"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "aggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_playlist_names",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT [Video_id]\n      ,[playlist_id]\n      ,cast([Video_Name] as nvarchar(10)) as Video_name\n      ,[Video_published_date]\n      ,[Video_views_count]\n      ,[Video_like_count]\n      ,[Video_favorite_count]\n      ,[Video_comment_count]\n      ,[Video_duartion]\n      ,[Video_thumbnail]\n      ,[Video_caption_status]\n  FROM [Project].[dbo].[Video] where playlist_id=','''',item().playlist_id,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {
												"table_name": "video"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_playlist_output",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@item().playlist_id",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"data": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-02T06:52:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]",
				"[concat(variables('factoryId'), '/dataflows/aggregate')]",
				"[concat(variables('factoryId'), '/datasets/ds_playlist_names')]",
				"[concat(variables('factoryId'), '/datasets/ds_playlist_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT [Comment_id]\n      ,[Video_id]\n      ,[Comment_author]\n      ,[Comment_published_date]\n  FROM [Project].[dbo].[Comment]",
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadUncommitted",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "comment"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_comment_tbl",
								"type": "DatasetReference",
								"parameters": {
									"File_name": "comment.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-02T00:17:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/ds_comment_tbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Surrogate_key_sort",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-02T06:52:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Surrogate_key_sort')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "str",
							"value": {
								"value": "@concat('{\n    \"to\":\"',variables('to'),'\",\n     \"subject\":\"',concat(pipeline().DataFactory,' ',pipeline().Pipeline,' ',pipeline().TriggerTime),'\",\n     \"body\":\"This is test email\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-73.eastus.logic.azure.com:443/workflows/48186c82e3ef4955804e0b671ce69628/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=7qcN8dUKISBFKsiQxZgQPsG_cCD7JemoS_jCfYO26ig",
							"body": {
								"value": "@variables('str')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"to": {
						"type": "String",
						"defaultValue": "bsurya1009@gmail.com"
					},
					"str": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-04T07:22:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "missing_files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-04T09:39:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/missing_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_variable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_outbound",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "File_name",
							"value": {
								"value": "@join(activity('Get Metadata1').output.childItems, ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "child_items",
							"value": {
								"value": "@activity('Get Metadata1').output.childItems[0].name",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"File_name": {
						"type": "String"
					},
					"child_items": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-03T08:26:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_outbound')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"start_time": {
						"type": "string"
					},
					"end_time": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().start_time,'_video_',dataset().end_time,'.csv')",
							"type": "Expression"
						},
						"fileSystem": "youtube"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "playlist_data.csv",
						"fileSystem": "inputdataflow"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "playlist_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Playlist_count')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "jGAJCAuV3pQ",
						"type": "String"
					},
					{
						"name": "UUX6OQ3DkcsbYNE6H8uQQuVA",
						"type": "String"
					},
					{
						"name": "World’s Most Expensive Coffee",
						"type": "String"
					},
					{
						"name": "Prop_3",
						"type": "String"
					},
					{
						"name": "2023-10-19 17:00:03.0000000",
						"type": "String"
					},
					{
						"name": "67986220",
						"type": "String"
					},
					{
						"name": "4324253",
						"type": "String"
					},
					{
						"name": "0",
						"type": "String"
					},
					{
						"name": "17091",
						"type": "String"
					},
					{
						"name": "PT33S",
						"type": "String"
					},
					{
						"name": "https://i.ytimg.com/vi/jGAJCAuV3pQ/default.jpg",
						"type": "String"
					},
					{
						"name": "false",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Video_id",
						"type": "varchar"
					},
					{
						"name": "playlist_id",
						"type": "varchar"
					},
					{
						"name": "Video_Name",
						"type": "varchar"
					},
					{
						"name": "Video_Description",
						"type": "varchar"
					},
					{
						"name": "Video_published_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Video_views_count",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Video_like_count",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Video_favorite_count",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Video_comment_count",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Video_duartion",
						"type": "varchar"
					},
					{
						"name": "Video_thumbnail",
						"type": "varchar"
					},
					{
						"name": "Video_caption_status",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Json_outbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "outbound"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_comment_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "comment.csv",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Comment_id",
						"type": "String"
					},
					{
						"name": "Video_id",
						"type": "String"
					},
					{
						"name": "Comment_author",
						"type": "String"
					},
					{
						"name": "Comment_published_date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_comment_tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"File_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().File_name",
							"type": "Expression"
						},
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "playlist_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_comment_video')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "video_comment.csv",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Video_id",
						"type": "String"
					},
					{
						"name": "playlist_id",
						"type": "String"
					},
					{
						"name": "Video_Name",
						"type": "String"
					},
					{
						"name": "Video_published_date",
						"type": "String"
					},
					{
						"name": "Video_views_count",
						"type": "String"
					},
					{
						"name": "Video_like_count",
						"type": "String"
					},
					{
						"name": "Video_favorite_count",
						"type": "String"
					},
					{
						"name": "Video_comment_count",
						"type": "String"
					},
					{
						"name": "Video_duartion",
						"type": "String"
					},
					{
						"name": "Video_thumbnail",
						"type": "String"
					},
					{
						"name": "Video_caption_status",
						"type": "String"
					},
					{
						"name": "Comment_id",
						"type": "String"
					},
					{
						"name": "Comment_author",
						"type": "String"
					},
					{
						"name": "Comment_published_date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_example_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dwsample3-json.json",
						"fileSystem": "inbound"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"quiz": {
							"type": "object",
							"properties": {
								"sport": {
									"type": "object",
									"properties": {
										"q1": {
											"type": "object",
											"properties": {
												"question": {
													"type": "string"
												},
												"options": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"answer": {
													"type": "string"
												}
											}
										}
									}
								},
								"maths": {
									"type": "object",
									"properties": {
										"q1": {
											"type": "object",
											"properties": {
												"question": {
													"type": "string"
												},
												"options": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"answer": {
													"type": "string"
												}
											}
										},
										"q2": {
											"type": "object",
											"properties": {
												"question": {
													"type": "string"
												},
												"options": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"answer": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "inbound"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_linked_select')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "playlist_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_outbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "outbound"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_playlist_names')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Playlist.csv",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "playlist_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_playlist_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().file_name,'_playlist.csv')",
							"type": "Expression"
						},
						"fileSystem": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_union_outbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Video_id",
						"type": "String"
					},
					{
						"name": "playlist_id",
						"type": "String"
					},
					{
						"name": "Video_name",
						"type": "String"
					},
					{
						"name": "Video_published_date",
						"type": "String"
					},
					{
						"name": "Video_views_count",
						"type": "String"
					},
					{
						"name": "Video_like_count",
						"type": "String"
					},
					{
						"name": "Video_favorite_count",
						"type": "String"
					},
					{
						"name": "Video_comment_count",
						"type": "String"
					},
					{
						"name": "Video_duartion",
						"type": "String"
					},
					{
						"name": "Video_thumbnail",
						"type": "String"
					},
					{
						"name": "Video_caption_status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_video_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "all_videos.csv",
						"fileSystem": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Video_id",
						"type": "String"
					},
					{
						"name": "playlist_id",
						"type": "String"
					},
					{
						"name": "Video_Name",
						"type": "String"
					},
					{
						"name": "Video_published_date",
						"type": "String"
					},
					{
						"name": "Video_views_count",
						"type": "String"
					},
					{
						"name": "Video_like_count",
						"type": "String"
					},
					{
						"name": "Video_favorite_count",
						"type": "String"
					},
					{
						"name": "Video_comment_count",
						"type": "String"
					},
					{
						"name": "Video_duartion",
						"type": "String"
					},
					{
						"name": "Video_thumbnail",
						"type": "String"
					},
					{
						"name": "Video_caption_status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/files_s')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "youtube"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/greater_than_10000')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "greaterthan1000.csv",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Video_id",
						"type": "String"
					},
					{
						"name": "playlist_id",
						"type": "String"
					},
					{
						"name": "Video_Name",
						"type": "String"
					},
					{
						"name": "Video_published_date",
						"type": "String"
					},
					{
						"name": "Video_views_count",
						"type": "String"
					},
					{
						"name": "Video_like_count",
						"type": "String"
					},
					{
						"name": "Video_favorite_count",
						"type": "String"
					},
					{
						"name": "Video_comment_count",
						"type": "String"
					},
					{
						"name": "Video_duartion",
						"type": "String"
					},
					{
						"name": "Video_thumbnail",
						"type": "String"
					},
					{
						"name": "Video_caption_status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/less_than_10000')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lessthan10000.csv",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Video_id",
						"type": "String"
					},
					{
						"name": "playlist_id",
						"type": "String"
					},
					{
						"name": "Video_Name",
						"type": "String"
					},
					{
						"name": "Video_published_date",
						"type": "String"
					},
					{
						"name": "Video_views_count",
						"type": "String"
					},
					{
						"name": "Video_like_count",
						"type": "String"
					},
					{
						"name": "Video_favorite_count",
						"type": "String"
					},
					{
						"name": "Video_comment_count",
						"type": "String"
					},
					{
						"name": "Video_duartion",
						"type": "String"
					},
					{
						"name": "Video_thumbnail",
						"type": "String"
					},
					{
						"name": "Video_caption_status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outfut_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sp_emailnotification')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "interprepdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Factory_name",
						"type": "nvarchar"
					},
					{
						"name": "pipeline_name",
						"type": "nvarchar"
					},
					{
						"name": "pipeline_run_id",
						"type": "nvarchar"
					},
					{
						"name": "modified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "logging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/interprepdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/video_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "playlist_data.csv",
						"fileSystem": "inputdataflow"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Video_id",
						"type": "String"
					},
					{
						"name": "playlist_id",
						"type": "String"
					},
					{
						"name": "Video_Name",
						"type": "String"
					},
					{
						"name": "Video_published_date",
						"type": "String"
					},
					{
						"name": "Video_views_count",
						"type": "String"
					},
					{
						"name": "Video_like_count",
						"type": "String"
					},
					{
						"name": "Video_favorite_count",
						"type": "String"
					},
					{
						"name": "Video_comment_count",
						"type": "String"
					},
					{
						"name": "Video_duartion",
						"type": "String"
					},
					{
						"name": "Video_thumbnail",
						"type": "String"
					},
					{
						"name": "Video_caption_status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "demo"
					}
				},
				"connectVia": {
					"referenceName": "testselfhosted",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/testselfhosted')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/interprepdb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('interprepdb_properties_typeProperties_server')]",
					"database": "[parameters('interprepdb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('interprepdb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('interprepdb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('linkedService1_properties_typeProperties_server')]",
					"database": "[parameters('linkedService1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('linkedService1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('linkedService1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline1",
						"type": "PipelineReference"
					},
					"parameters": {
						"start_time": "[parameters('trigger1_properties_pipeline_parameters_start_time')]",
						"end_time": "[parameters('trigger1_properties_pipeline_parameters_end_time')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2023-10-05T00:00:00Z",
					"endTime": "2023-12-31T23:59:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testselfhosted')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conditional_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "video_files",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outfut_files",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outfut_files",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as integer,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 split(Video_views_count>=10000,",
						"     disjoint: false) ~> split1@(viewcount10000, viewcount9999)",
						"split1@viewcount10000 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['greaterthan1000.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Video_id,",
						"          playlist_id,",
						"          Video_Name,",
						"          Video_published_date,",
						"          Video_views_count,",
						"          Video_like_count,",
						"          Video_favorite_count,",
						"          Video_comment_count,",
						"          Video_duartion,",
						"          Video_thumbnail,",
						"          Video_caption_status",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@viewcount9999 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['lessthan10000.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/video_files')]",
				"[concat(variables('factoryId'), '/datasets/outfut_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flatten')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_example_json",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Json_outbound",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          address as (city as string, postalCode as integer, state as string, streetAddress as short),",
						"          age as short,",
						"          firstName as string,",
						"          gender as string,",
						"          lastName as string,",
						"          phoneNumbers as (number as long, type as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> source1",
						"source1 foldDown(unroll(phoneNumbers),",
						"     mapColumn(",
						"          address,",
						"          age,",
						"          firstName,",
						"          gender,",
						"          lastName,",
						"          phoneNumbers",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 select(mapColumn(",
						"          firstName,",
						"          lastName,",
						"          gender,",
						"          age,",
						"          address,",
						"          phoneNumbers",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['flatten.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_example_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_Json_outbound')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Join_pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "video_files",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_comment_files",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Comment_id as string,",
						"          Video_id as string,",
						"          Comment_author as string,",
						"          Comment_published_date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(source1@Video_id == source2@Video_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 pivot(groupBy(source1@Video_id),",
						"     pivotBy(playlist_id),",
						"     {} = count(Comment_id),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          playlist_id as string",
						"     ),",
						"     partitionFileNames:['video_comment.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/video_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_comment_files')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "video_files",
								"type": "DatasetReference"
							},
							"name": "video"
						},
						{
							"dataset": {
								"referenceName": "ds_comment_video",
								"type": "DatasetReference"
							},
							"name": "comment"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "video_files",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> video",
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string,",
						"          Comment_id as string,",
						"          Comment_author as string,",
						"          Comment_published_date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> comment",
						"video, comment lookup(video@Video_id == comment@Video_id,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(Comment_id, true),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(No_comments = case(isNull(Comment_published_date),'NO_comments','Commented')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     partitionFileNames:['derived_column.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/video_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_comment_video')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "video_files",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_union_outbound",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_union_outbound",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "rank1"
						},
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as integer,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 rank(desc(Video_comment_count, true),",
						"     output(rank as long),",
						"     dense: true) ~> rank1",
						"source1 window(over(playlist_id),",
						"     desc(Video_comment_count, true),",
						"     lead = lead(Video_comment_count),",
						"          count_videos = count(Video_id)) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     partitionFileNames:['window.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     partitionFileNames:['rank.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/video_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_union_outbound')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Surrogate_key_sort')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_comment_video",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_linked_select",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "id"
						},
						{
							"name": "sort1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string,",
						"          Comment_id as string,",
						"          Comment_author as string,",
						"          Comment_published_date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(Video_id),",
						"     Comments_table = count(Comment_id)) ~> aggregate1",
						"sort1 keyGenerate(output(id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> id",
						"aggregate1 sort(desc(Comments_table, true)) ~> sort1",
						"id select(mapColumn(",
						"          id,",
						"          Video_id,",
						"          Comments_count = Comments_table",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          playlist_id as string",
						"     ),",
						"     partitionFileNames:['select_surrogate_join.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_comment_video')]",
				"[concat(variables('factoryId'), '/datasets/ds_linked_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "video_files",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Playlist_count",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as integer,",
						"          Video_like_count as integer,",
						"          Video_favorite_count as boolean,",
						"          Video_comment_count as integer,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          playlist_id,",
						"          Video_views_count",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(playlist_id),",
						"     dummycount = sum(Video_views_count)) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          playlist_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          jGAJCAuV3pQ as string,",
						"          UUX6OQ3DkcsbYNE6H8uQQuVA as string,",
						"          {World’s Most Expensive Coffee} as string,",
						"          Prop_3 as string,",
						"          {2023-10-19 17:00:03.0000000} as string,",
						"          {67986220} as string,",
						"          {4324253} as string,",
						"          {0} as string,",
						"          {17091} as string,",
						"          PT33S as string,",
						"          {https://i.ytimg.com/vi/jGAJCAuV3pQ/default.jpg} as string,",
						"          false as string",
						"     ),",
						"     partitionFileNames:['Playlist.csv'],",
						"     umask: 0466,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/video_files')]",
				"[concat(variables('factoryId'), '/datasets/Playlist_count')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_video_files",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_union_outbound",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as integer,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 filter(Video_views_count>1000) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     partitionFileNames:['filter.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_video_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_union_outbound')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "less_than_10000",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "greater_than_10000",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_union_outbound",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_Name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Video_id as string,",
						"          playlist_id as string,",
						"          Video_name as string,",
						"          Video_published_date as string,",
						"          Video_views_count as string,",
						"          Video_like_count as string,",
						"          Video_favorite_count as string,",
						"          Video_comment_count as string,",
						"          Video_duartion as string,",
						"          Video_thumbnail as string,",
						"          Video_caption_status as string",
						"     ),",
						"     partitionFileNames:['all_videos.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/less_than_10000')]",
				"[concat(variables('factoryId'), '/datasets/greater_than_10000')]",
				"[concat(variables('factoryId'), '/datasets/ds_union_outbound')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling_window')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline1",
						"type": "PipelineReference"
					},
					"parameters": {
						"start_time": "[parameters('Tumbling_window_properties_pipeline_parameters_start_time')]",
						"end_time": "[parameters('Tumbling_window_properties_pipeline_parameters_end_time')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-10-05T00:00:00Z",
					"endTime": "2024-12-31T23:59:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		}
	]
}